<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\high_temp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\high_temp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Apr 23 17:42:01 2025
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[6]">att_read_callback</a> from profile.o(.text.att_read_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[7]">att_write_callback</a> from profile.o(.text.att_write_callback) referenced 2 times from profile.o(.text.setup_profile)
 <LI><a href="#[c]">cb_assertion</a> from main.o(.text.cb_assertion) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[b]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[e]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[9]">cb_putc</a> from main.o(.text.cb_putc) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[f]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[13]">impl_kv_get</a> from kv_impl.o(.text.impl_kv_get) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[12]">impl_kv_put</a> from kv_impl.o(.text.impl_kv_put) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[11]">impl_kv_remove</a> from kv_impl.o(.text.impl_kv_remove) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[10]">impl_kv_remove_all</a> from kv_impl.o(.text.impl_kv_remove_all) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[15]">impl_kv_value_modified_of_key</a> from kv_impl.o(.text.impl_kv_value_modified_of_key) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[14]">impl_kv_visit</a> from kv_impl.o(.text.impl_kv_visit) referenced from kv_impl.o(.rodata.kv_backend)
 <LI><a href="#[5]">kv_visitor_dump</a> from kv_impl.o(.text.kv_visitor_dump) referenced 2 times from kv_impl.o(.text.kv_do_gc)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d]">on_lle_init</a> from main.o(.text.on_lle_init) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[4]">reset_timer_callback</a> from profile.o(.text.reset_timer_callback) referenced 2 times from profile.o(.text.att_write_callback)
 <LI><a href="#[a]">setup_profile</a> from profile.o(.text.setup_profile) referenced from main.o(.rodata.evt_cb_table)
 <LI><a href="#[8]">user_packet_handler</a> from profile.o(.text.user_packet_handler) referenced 2 times from profile.o(.text.setup_profile)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>att_server_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[74]"></a>att_server_register_packet_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[7a]"></a>att_set_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[77]"></a>gap_set_adv_set_random_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[6f]"></a>gap_set_ext_adv_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[71]"></a>gap_set_ext_adv_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[6e]"></a>gap_set_ext_adv_para</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[70]"></a>gap_set_ext_scan_response_data</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
</UL>

<P><STRONG><a name="[73]"></a>hci_add_event_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[4b]"></a>kv_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rest_flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_con_flash
</UL>

<P><STRONG><a name="[68]"></a>kv_init_backend</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[4c]"></a>kv_put</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_con_flash
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[43]"></a>kv_remove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[4d]"></a>kv_value_modified_of_key</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[42]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[49]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove_all
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[3c]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_uint8_to_ascii
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_con_flash
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_change_adv
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
</UL>

<P><STRONG><a name="[6c]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_callback
</UL>

<P><STRONG><a name="[3f]"></a>platform_set_evt_callback_table</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[44]"></a>platform_set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[16]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[7f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[17]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[81]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[82]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[83]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[84]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[32]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[19]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, peripheral_gpio.o(.text.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_int_mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[1c]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[1d]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[20]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[22]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[24]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[25]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[2b]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[2d]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[2e]"></a>SYSCTRL_ICacheControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ICacheControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[2f]"></a>SYSCTRL_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[31]"></a>SYSCTRL_SetLDOOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_SetLDOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_SetLDOOutput &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[48]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[34]"></a>ad_data_from_type</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ad_parser.o(.text.ad_data_from_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ad_data_from_type &rArr; ad_iterator_next
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data_type
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_get_data_len
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_next
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_has_more
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_iterator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_change_adv
</UL>

<P><STRONG><a name="[39]"></a>ad_iterator_get_data</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ad_parser.o(.text.ad_iterator_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ad_iterator_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[38]"></a>ad_iterator_get_data_len</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ad_parser.o(.text.ad_iterator_get_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ad_iterator_get_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[37]"></a>ad_iterator_get_data_type</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ad_parser.o(.text.ad_iterator_get_data_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ad_iterator_get_data_type
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[36]"></a>ad_iterator_has_more</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ad_parser.o(.text.ad_iterator_has_more))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ad_iterator_has_more
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[35]"></a>ad_iterator_init</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ad_parser.o(.text.ad_iterator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ad_iterator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[3a]"></a>ad_iterator_next</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ad_parser.o(.text.ad_iterator_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ad_iterator_next
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
</UL>

<P><STRONG><a name="[3b]"></a>adv_uint8_to_ascii</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, kv_flash.o(.text.adv_uint8_to_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_uint8_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rest_flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
</UL>

<P><STRONG><a name="[3e]"></a>apUART_BaudRateSet</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[47]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[3d]"></a>apUART_Initialize</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_main &rArr; SYSCTRL_Init &rArr; flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback_table
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[f]"></a>cb_trace_rtt</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[4a]"></a>check_flash</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, kv_flash.o(.text.check_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_flash &rArr; adv_uint8_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_uint8_to_ascii
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_value_modified_of_key
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[4e]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[52]"></a>erase_flash_sector</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eflash.o(.text.erase_flash_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
</UL>

<P><STRONG><a name="[54]"></a>find_change_adv</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, profile.o(.text.find_change_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = find_change_adv &rArr; ad_data_from_type &rArr; ad_iterator_next
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_from_type
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[58]"></a>flash_enable_write_protection</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, eflash.o(.text.flash_enable_write_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_enable_write_protection
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[30]"></a>flash_get_factory_calib_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eflash.o(.text.flash_get_factory_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = flash_get_factory_calib_data &rArr; flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
</UL>

<P><STRONG><a name="[55]"></a>flash_prepare_factory_data</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, eflash.o(.text.flash_prepare_factory_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = flash_prepare_factory_data &rArr; copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_enable_write_protection
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_protection_status
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_factory_calib_data
</UL>

<P><STRONG><a name="[5a]"></a>get_con_flash</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, kv_flash.o(.text.get_con_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_con_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[67]"></a>kv_impl_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, kv_impl.o(.text.kv_impl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = kv_impl_init &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_init_backend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_repair
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[d]"></a>on_lle_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.on_lle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_lle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[53]"></a>program_flash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, eflash.o(.text.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = program_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[50]"></a>read_flash_security</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, eflash.o(.text.read_flash_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
</UL>

<P><STRONG><a name="[6b]"></a>read_rest_flash</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, kv_flash.o(.text.read_rest_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_rest_flash &rArr; adv_uint8_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_uint8_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_profile
</UL>

<P><STRONG><a name="[4]"></a>reset_timer_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, profile.o(.text.reset_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.att_write_callback)
</UL>
<P><STRONG><a name="[40]"></a>setup_peripherals</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a]"></a>setup_profile</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, profile.o(.text.setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = setup_profile &rArr; kv_impl_init &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rest_flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_con_flash
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_change_adv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[41]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[51]"></a>write_flash</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, eflash.o(.text.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_security_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
</UL>

<P><STRONG><a name="[7d]"></a>write_flash0</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, eflash.o(.text.write_flash0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash0
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[c]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[e]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.rodata.evt_cb_table)
</UL>
<P><STRONG><a name="[6]"></a>att_read_callback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, profile.o(.text.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_read_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[7]"></a>att_write_callback</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, profile.o(.text.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_write_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_timer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[8]"></a>user_packet_handler</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, profile.o(.text.user_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = user_packet_handler &rArr; setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_value_modified_of_key
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_put
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_adv_set_random_addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_remove
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_msg_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_user_msg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_le_meta_get_subevent_code
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_command_complete_get_command_opcode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_event_state_get_state
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_packet_get_type
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> profile.o(.text.setup_profile)
</UL>
<P><STRONG><a name="[75]"></a>hci_event_packet_get_type</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[76]"></a>btstack_event_state_get_state</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.btstack_event_state_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_event_state_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[6d]"></a>setup_adv</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, profile.o(.text.setup_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setup_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_scan_response_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_para
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_ext_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[78]"></a>hci_event_command_complete_get_command_opcode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, profile.o(.text.hci_event_command_complete_get_command_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_command_complete_get_command_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[79]"></a>hci_event_le_meta_get_subevent_code</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_le_meta_get_subevent_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_le_meta_get_subevent_code
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[7b]"></a>hci_event_packet_get_user_msg</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, profile.o(.text.hci_event_packet_get_user_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_event_packet_get_user_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[7c]"></a>user_msg_handler</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, profile.o(.text.user_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_packet_handler
</UL>

<P><STRONG><a name="[65]"></a>kv_flash_repair</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, kv_impl.o(.text.kv_flash_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_flash_repair &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[64]"></a>kv_do_backup</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, kv_impl.o(.text.kv_do_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[61]"></a>kv_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kv_reset &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove_all
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_impl_init
</UL>

<P><STRONG><a name="[66]"></a>next_item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kv_impl.o(.text.next_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_flash_repair
</UL>

<P><STRONG><a name="[10]"></a>impl_kv_remove_all</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, kv_impl.o(.text.impl_kv_remove_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = impl_kv_remove_all &rArr; kv_reset &rArr; erase_flash_sector &rArr; program_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[11]"></a>impl_kv_remove</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, kv_impl.o(.text.impl_kv_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = impl_kv_remove &rArr; kv_do_remove_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_remove_key
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[5c]"></a>kv_search_cache</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, kv_impl.o(.text.kv_search_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kv_search_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_value_modified_of_key
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
</UL>

<P><STRONG><a name="[60]"></a>kv_do_remove_key</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_do_remove_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = kv_do_remove_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
</UL>

<P><STRONG><a name="[5d]"></a>kv_search_flash</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, kv_impl.o(.text.kv_search_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kv_search_flash &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_remove
</UL>

<P><STRONG><a name="[12]"></a>impl_kv_put</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kv_impl.o(.text.impl_kv_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = impl_kv_put &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[5e]"></a>kv_search</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, kv_impl.o(.text.kv_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kv_search &rArr; kv_search_flash &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_get
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
</UL>

<P><STRONG><a name="[5f]"></a>kv_do_append_key</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, kv_impl.o(.text.kv_do_append_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_visitor_dump
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_value_modified_of_key
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_put
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_remove_key
</UL>

<P><STRONG><a name="[13]"></a>impl_kv_get</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kv_impl.o(.text.impl_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = impl_kv_get &rArr; kv_search &rArr; kv_search_flash &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[14]"></a>impl_kv_visit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kv_impl.o(.text.impl_kv_visit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = impl_kv_visit &rArr; impl_do_kv_visit &rArr; kv_search_flash &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[5b]"></a>impl_do_kv_visit</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, kv_impl.o(.text.impl_do_kv_visit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = impl_do_kv_visit &rArr; kv_search_flash &rArr; next_item
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_flash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_gc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_kv_visit
</UL>

<P><STRONG><a name="[15]"></a>impl_kv_value_modified_of_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kv_impl.o(.text.impl_kv_value_modified_of_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = impl_kv_value_modified_of_key &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_search_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.rodata.kv_backend)
</UL>
<P><STRONG><a name="[63]"></a>kv_do_gc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kv_impl.o(.text.kv_do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_do_kv_visit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>

<P><STRONG><a name="[5]"></a>kv_visitor_dump</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, kv_impl.o(.text.kv_visitor_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = kv_visitor_dump &rArr; kv_do_append_key &rArr; kv_do_gc &rArr; kv_do_backup &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_do_append_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kv_impl.o(.text.kv_do_gc)
</UL>
<P><STRONG><a name="[69]"></a>read_flash_security0</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, eflash.o(.text.read_flash_security0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_flash_security0
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_page_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
</UL>

<P><STRONG><a name="[6a]"></a>security_page_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eflash.o(.text.security_page_read))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security0
</UL>

<P><STRONG><a name="[56]"></a>is_data_ready</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, eflash.o(.text.is_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = is_data_ready &rArr; calc_ft_sum &rArr; calc_checksum_32
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ft_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[57]"></a>flash_read_protection_status</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, eflash.o(.text.flash_read_protection_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_read_protection_status
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[4f]"></a>copy_security_data</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, eflash.o(.text.copy_security_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = copy_security_data &rArr; read_flash_security &rArr; SYSCTRL_ICacheControl &rArr; SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_security
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[59]"></a>write_ft_sum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eflash.o(.text.write_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_ft_sum &rArr; write_flash &rArr; write_flash0
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_prepare_factory_data
</UL>

<P><STRONG><a name="[62]"></a>get_ft_sum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eflash.o(.text.get_ft_sum))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[45]"></a>calc_ft_sum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eflash.o(.text.calc_ft_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calc_ft_sum &rArr; calc_checksum_32
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_checksum_32
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ft_sum
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_data_ready
</UL>

<P><STRONG><a name="[46]"></a>calc_checksum_32</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, eflash.o(.text.calc_checksum_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_checksum_32
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ft_sum
</UL>

<P><STRONG><a name="[1b]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
</UL>

<P><STRONG><a name="[1a]"></a>map_int_mode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.map_int_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map_int_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[1f]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[1e]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[2c]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[29]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[2a]"></a>set_reg_bits</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SetLDOOutput
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_CacheControl0
</UL>

<P><STRONG><a name="[28]"></a>SYSCTRL_CacheControl0</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_CacheControl0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCTRL_CacheControl0 &rArr; set_reg_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ICacheControl
</UL>

<P><STRONG><a name="[23]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[21]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[26]"></a>_WriteNoCheck</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[27]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
